/* # –ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç—Ç—è 3. –ú–∞—Å–∏–≤–∏ */

/* 
  ## Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º (push, pop, shift, unshift)
  1. –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ `genres` –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª —Ç–∞ ¬´Blues¬ª.
  2. –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª¬ª –¥–æ –∫—ñ–Ω—Ü—è.
  3. –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
  4. –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É
    –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
  5. –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
  6. –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.
  const genres = ;
*/
//1
// const genres = ['Jazz', 'Blues'];
//2
// genres.push('–†–æ–∫-–Ω-—Ä–æ–ª');
// console.table(genres);

// console.log(genres.pop());
//3
// const index = 0;
// console.log(genres[index]);
//4
// console.log('length', genres.length);
// console.log(genres[genres.length - 1]);
//5 shift
// console.log(genres.shift());
//6 unshift
// console.log(genres.unshift('Country', 'Reggae'));

// console.table(genres);

/* 
  ## Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
  –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è
  —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π `values` —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ
  —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
  const values = '8 11';
*/
// const values = '8 11';
// const array = values.split(' ');
// const width = Number(array[0]);
// const height = Number(array[1]);

// const rectSquare = width * height;
// console.log(rectSquare);

/* 
  ## Example 3 - –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É
  –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É `fruits` —Ü–∏–∫–ª–æ–º `for`. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
  –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ `–Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞`.
  –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ `1`.
  const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
*/
// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let index = 0; index < fruits.length; index += 1) {
//   const fruit = fruits[index];
//   console.log(`${index + 1}: ${fruit}`);
// }
// for (const fruit of fruits) {
//   const index = fruits.indexOf(fruit);
//   console.log(`${index + 1}: ${fruit}`);
// }

/* 
  ## Example 4 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏ (split, for, for of)
  –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£
  –∑–º—ñ–Ω–Ω–∏—Ö `names` —Ç–∞ `phones` –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤,
  —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞
  –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
  const names = 'Jacob,William,Solomon,Artemis';
  const phones = '89001234567,89001112233,890055566377,890055566300';
*/
// const namesString = 'Jacob,William,Solomon,Artemis';
// const phonesString = '89001234567,89001112233,890055566377,890055566300';

// const names = namesString.split(',');
// const phones = phonesString.split(',');

// for (let index = 0; index < names.length; index += 1) {
//   const name = names[index];
//   const phone = phones[index];
//   console.log(`${name}: ${phone}`);
// }

// console.log('=====');
// for (const phone of phones) {
//   const index = phones.indexOf(phone);
//   const name = names[index];

//   console.log(`${name}: ${phone}`);
// }

/* 
  ## Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏ (split, slice, join)
  –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ
  –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è
  —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±—ñ–ª—É. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.
  const string = 'Welcome to the future';
*/
// const string = 'Welcome to the future';
// const words = string.split(' ');
// // words.shift();
// // words.pop();
// // console.log(words);
// const shortWords = words.slice(1, words.length - 1);

// const shortString = shortWords.join(' ');

// // console.log(shortWords);
// console.log(shortString);

/* 
  ## Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
  –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) —ñ –≤–∏–≤–æ–¥–∏—Ç—å
  –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
  const string = 'Welcome to the future';
*/
// const string = 'Welcome to the future';
// const words = string.split(' ');

// const reversedWords = [];

// console.log(words);

// for (let index = words.length - 1; index >= 0; index -= 1) {
//   const word = words[index];
//   reversedWords.push(word);
// }

// The variant by Inna
// for (let index = 0; index < words.length; index += 1) {
//   const word = words[index];
//   reversedWords.unshift(word);
// }

// const reversedString = reversedWords.join(' ');

// console.log(reversedString);

// –º–µ—Ç–æ–¥ .reverse()
//console.log(words.reverse());

//future the to Welcome

/* 
  ## Example 7 - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —ñ–∑ —Ü–∏–∫–ª–æ–º
  –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Ä—è–¥–∫—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é
–µ–ª–µ–º–µ–Ω—Ç–∞.
  const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
*/

const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// const sortedLangs = [];

// while (langs.length > 0) {
//   let min = langs[0];

//   for (const lang of langs) {
//     if (lang < min) {
//       min = lang;
//     }
//   }

//   sortedLangs.push(min);
//   const minIndex = langs.indexOf(min);
//   langs.splice(minIndex, 1);
// }

// console.log(langs);
// console.log(sortedLangs);

// –º–µ—Ç–æ–¥ .sort();
console.log(langs.sort());

//sortedLangs ['c++', 'haskel', 'javascript', 'php', 'python', 'ruby']

/* 
  ## Example 8 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
  –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è
  –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ. 
  const numbers = [2, 17, 94, 1, 23, 37];
  let min;
  console.log(min); // 1
*/

// const numbers = [2, 17, 94, 1, 23, 37];
// let min = numbers[0]; //2

// for (const number of numbers) {
//   if (number < min) {
//     min = number;
//   }
// }