/* # –ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç—Ç—è 7. –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. forEach */

/* 
    ## Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
    –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
    - `createProduct(obj, callback)` - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂
      –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π 
      —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `id` —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É 
      —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
    - `logProduct(product)` - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ 
      –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    - `logTotalPrice(product)` - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ 
      –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å
    function createProduct(partialProduct, callback) {
    }
    function logProduct(product) {
    }
    function logTotalPrice(product) {
    }
    createProduct({name: 'üçé', price: 30, quantity: 3}, logProduct);
    createProduct({name: 'üçã', price: 20, quantity: 5}, logTotalPrice);
*/

// function createProduct(partialProduct, callback) {
//   const product = {
//     id: Date.now(),
//     ...partialProduct,
//   };

//   callback(product);
// }

// function logProduct(product) {
//   console.log(product);
// }

// function logTotalPrice({price, quantity}) {
//   console.log(price * quantity);
// }

// function logNameAndQuantity({name, quantity}) {
//   console.log(`${name}: ${quantity}`);
// }

// createProduct({name: 'üçé', price: 30, quantity: 3}, logProduct);
// createProduct({name: 'üçã', price: 20, quantity: 5}, logTotalPrice);
// createProduct({name: 'üçã', price: 20, quantity: 5}, logNameAndQuantity);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* 
  ## Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
  –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç `account` –º–µ—Ç–æ–¥–∏ `withdraw(amount, onSuccess, onError)` —Ç–∞
  `deposit(amount, onSuccess, onError)`, –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞
  –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.
  –ú–µ—Ç–æ–¥ `deposit` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ
  –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
  –ú–µ—Ç–æ–¥ `withdraw` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ
  this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.
  const TRANSACTION_LIMIT = 1000;
  const account = {
    username: 'Jacob',
    balance: 400,
    withdraw(amount, onSuccess, onError) {
    },
    deposit(amount, onSuccess, onError) {
    },
  };
  function handleSuccess(message) {
    console.log(`‚úÖ Success! ${message}`);
  }
  function handleError(message) {
    console.log(`‚ùå Error! ${message}`);
  }
  account.withdraw(2000, handleSuccess, handleError);
  account.withdraw(600, handleSuccess, handleError);
  account.withdraw(300, handleSuccess, handleError);
  account.deposit(1700, handleSuccess, handleError);
  account.deposit(0, handleSuccess, handleError);
  account.deposit(-600, handleSuccess, handleError);
  account.deposit(600, handleSuccess, handleError);
*/
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 400,
//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Your amount is bigger then ${TRANSACTION_LIMIT}`);
//     } else if (amount <= 0) {
//       onError(`Your amount must be bigger then 0`);
//     } else {
//       this.balance += amount;
//       onSuccess(`Your balance is ${this.balance}`);
//     }
//   },
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Your amount is bigger then ${TRANSACTION_LIMIT}`);
//     } else if (amount > this.balance) {
//       onError('–ù–æ—Ç —ñ–Ω–∞—Ñ –º–∞–Ω—ñ');
//     } else {
//       this.balance -= amount;
//       onSuccess(`Your balance is ${this.balance}`);
//     }
//   },
// };

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }
// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);

//
//
//
//
//
//
//
//
//
//

/* 
  ## Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
  –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é `each(array, callback)`, —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î
  –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
  –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
  –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.
*/
// function each(array, callback) {
//   const results = [];

//   for (const item of array) {
//     const result = callback(item);
//     results.push(result);
//   }

//   return results;
// }

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value * 2;
//   }),
// );

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   }),
// );

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );

//
//
//
//
//
//
//
//
//
//

/* 
  ## Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—Ä–∏–∫–ª–∞–¥ –∑ 1-–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è 
*/
// const createProduct = (partialProduct, callback) => {
//   const product = {
//     id: Date.now(),
//     ...partialProduct,
//   };

//   callback(product);
// };

// const logProduct = (product) => {
//   console.log(product);
// };

// const logTotalPrice = ({price, quantity}) => {
//   console.log(price * quantity);
// };

// const logNameAndQuantity = ({name, quantity}) => {
//   console.log(`${name}: ${quantity}`);
// };

// createProduct({name: 'üçé', price: 30, quantity: 3}, logProduct);
// createProduct({name: 'üçã', price: 20, quantity: 5}, logTotalPrice);
// createProduct({name: 'üçã', price: 20, quantity: 5}, logNameAndQuantity);

/*
  ## Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—Ä–∏–∫–ª–∞–¥ –∑ 2-–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
*/
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 400,
//   deposit(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Your amount is bigger then ${TRANSACTION_LIMIT}`);
//     } else if (amount <= 0) {
//       onError(`Your amount must be bigger then 0`);
//     } else {
//       this.balance += amount;
//       onSuccess(`Your balance is ${this.balance}`);
//     }
//   },
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT) {
//       onError(`Your amount is bigger then ${TRANSACTION_LIMIT}`);
//     } else if (amount > this.balance) {
//       onError('–ù–æ—Ç —ñ–Ω–∞—Ñ –º–∞–Ω—ñ');
//     } else {
//       this.balance -= amount;
//       onSuccess(`Your balance is ${this.balance}`);
//     }
//   },
// };

// const handleSuccess = (message) => {
//   console.log(`‚úÖ Success! ${message}`);
// };
// const handleError = (message) => {
//   console.log(`‚ùå Error! ${message}`);
// };

// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);

/* 
  ## Example 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—Ä–∏–∫–ª–∞–¥ –∑ 3-–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
*/
/* const each = (array, callback) => {
    const results = [];
  
    for (const item of array) {
      const result = callback(item);
      results.push(result);
    }
  
    return results;
  }; */
  
  // const multiply3 = function (value) {
  //   return value * 2;
  // };
  // const multiply2 = (value) => {
  //   console.log('dfdfdf');
  //   if (value > 2) {
  //     return value * 3;
  //   }
  //   return value * 2;
  // };
  // const multiply = (value) => value * 2;
  
  // const multiply4 = (value) => ({
  //   value2: value * 2,
  // });
  
  // console.log(each([64, 49, 36, 25, 16], (value) => value * 2));
  
  // console.log(each([64, 49, 36, 25, 16], (value) => value - 10));
  
  // console.log(each([64, 49, 36, 25, 16], (value) => Math.sqrt(value)));
  // console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.ceil(value)));
  // console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.floor(value)));
  
  /* 
    ## Example 7 - –ú–µ—Ç–æ–¥ forEach
    –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
    function logItems(items) {
      console.log(items);
      for (let i = 0; i < items.length; i += 1) {
          console.log(`${i + 1} - ${items[i]}`);
        }
    }
    logItems(['Mango', 'Poly', 'Ajax']);
    logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);
  */
  // function logItems(items) {
  // for (let i = 0; i < items.length; i += 1) {
  //   console.log(`${i + 1}: ${items[i]}`);
  // }
  // items.forEach((item, index, array) => {
  //   console.log(`${index + 1}: ${item}`);
  // });
  // }
  
  // const logger = (item, index) => {
  //   console.log(`${index + 1}: ${item}`);
  // };
  
  // ['Mango', 'Poly', 'Ajax'].forEach(logger);
  // console.log('=======');
  // ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'].forEach(logger);
  
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  
  /*
    ## Example 8 - –ú–µ—Ç–æ–¥ forEach
    –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
    function printContactsInfo({names, phones}) {
      const nameList = names.split(',');
      const phoneList = phones.split(',');
      for (let i = 0; i < nameList.length; i += 1) {
        console.log(`${nameList[i]}: ${phoneList[i]}`);
      }
    }
    printContactsInfo({
      names: 'Jacob,William,Solomon,Artemis',
      phones: '89001234567,89001112233,890055566377,890055566300',
    });
  */
  
  // const printContactsInfo = ({names, phones}) => {
  //   const nameList = names.split(',');
  //   const phoneList = phones.split(',');
  
  //   // for (let i = 0; i < nameList.length; i += 1) {
  //   //   console.log(`${nameList[i]}: ${phoneList[i]}`);
  //   // }
  
  //   nameList.forEach((name, index) => {
  //     console.log(`${name}: ${phoneList[index]}`);
  //   });
  // };
  
  // printContactsInfo({
  //   names: 'Jacob,William,Solomon,Artemis',
  //   phones: '89001234567,89001112233,890055566377,890055566300',
  // });
  
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  
  /*
    ## Example 9 - –ú–µ—Ç–æ–¥ forEach
    –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
    function cal—ÅulateAverage(...args) {
      let total = 0;
      for (let i = 0; i < args.length; i++) {
        total += args[i];
      }
      return total / args.length;
    }
    console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
    console.log(cal—ÅulateAverage(14, 8, 2)); // 8
    console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2
  */
  
  // const cal—ÅulateAverage = (...args) => {
  //   let total = 0;
  //   // for (let i = 0; i < args.length; i++) {
  //   //   total += args[i];
  //   // }
  
  //   args.forEach((candiBober) => {
  //     total += candiBober;
  //   });
  
  //   return total / args.length;
  // };
  
  // console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
  // console.log(cal—ÅulateAverage(14, 8, 2)); // 8
  // console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2
  
  /* –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –º–∞—Å–∏–≤—ñ–≤ */
  // const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
  // const [apple, grape, ...all] = fruits;
  // console.log(apple);
  // console.log(grape);