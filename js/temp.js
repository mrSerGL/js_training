//* 1. Объявление параметров x, y, z
// function multiply(x, y, z) {
   
//     return x * y * z;
// }

//? Когда интерпретатор встречает вызов функции (или метода), он приостанавливает выполнение текущего кода и начинает выполнять код из тела функции. После того как весь код функции будет выполнен, интерпретатор выходит из тела функции, возвращаясь в то место, откуда пришел и продолжает выполнять код, следующий после вызова функции.

// console.log("Лог до вызова функции multiply");
// let result = multiply(2, 3, 66665);
// console.log(result);
// console.log("Лог после вызова функции multiply");
  
//* 2. Передача аргументов
//|    multiply(2, 3, 55); // Результат умножения равен 30
//|    multiply(4, 8, 12); // Результат умножения равен 384
//|    multiply(17, 6, 25); // Результат умножения равен 2550

//*Когда интерпретатор встречает return, он сразу же выходит из функции (прекращает её выполнение), и возвращает указанное значение в то место кода, где функция была вызвана.

//|  function multiply(x, y, z) {
//|  console.log("Код до return выполняется как обычно");
//|  // Возвращаем результат выражения умножения
//|  return x * y * z;
//|  console.log("Этот лог никогда не выполнится, он стоит после return");
//|}

//*  Результат работы функции можно сохранить в переменную

// |  let result = multiply(2, 3, 66665);
// |  console.log(result); // 30

// |  result = multiply(4, 8, 12);
// |  console.log(result); // 384

// |  result = multiply(17, 6, 25);
// |  console.log(result); // 2550

// ===== Параметры по умолчанию
//? Иногда необходимо объявить функцию, у параметров которой будут значения отличные от undefined, даже если для них не передали аргументы. Это делается очень простым и очевидным образом, достаточно указать значение по умолчанию прямо при объявлении параметров в подписи функции. При такой записи, если для параметра не передано значение аргумента, используется значение по умолчанию.

// function count(countFrom = 0, countTo = 10, step = 1) {
//   console.log(`countFrom = ${countFrom}, countTo = ${countTo}, step = ${step}`);

//   for (let i = countFrom; i <= countTo; i += step) {
//     console.log(i);
//   }
// }

// count(1, 5); // countFrom = 1, countTo = 5, step = 1
// count(2); // countFrom = 2, countTo = 10, step = 1
// count(); // countFrom = 0, countTo = 10, step = 1

// ===== Псевдомассив arguments

//?Доступ к списку всех аргументов можно получить при помощи <b>\\\ специальной переменной arguments ///</b>, которая доступна только внутри функции и хранит все аргументы как псевдомассив.

//? Псевдомассив - коллекция, со свойством length и возможностью обратиться к элементу по индексу, но отсутствием большинства методов для работы с массивом.

//? Рассмотрим пример использования arguments в функции, которая умножает любое количество аргументов:

function multiply() {
  let total = 1;

  for (const argument of arguments) {
    total *= argument;
  }

  return total;
}

console.log(multiply(1, 2, 3)); //  6
console.log(multiply(1, 2, 3, 4)); //  24
console.log(multiply(1, 2, 3, 4, 5)); //  120







  




